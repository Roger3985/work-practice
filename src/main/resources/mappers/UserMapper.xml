<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace = 對應介面的全限定符 -->
<mapper namespace="com.roger.user.mapper.UserMapper">
    <!--
        xml 撰寫 sql 語句 沒有 Java 代碼
        mybatis 固定你在特定標籤內的寫 sql 語句
        mapper 應該有約束!
    -->
    <!--
        聲明標籤寫sql語句
        CRUD: insert、delete、update、select
        每個介面對應一個方法! 方法的一個實現
    -->
    <!-- 新增使用者 -->
    <insert id="addUser" parameterType="com.roger.user.pojo.User" useGeneratedKeys="true">
        INSERT INTO "user"(username, password, create_time, update_time, department_id)
        VALUES (#{username}, #{password}, now(), now(), #{department.id})
    </insert>

    <!-- 刪除使用者 -->
    <delete id="deleteUser">
        DELETE FROM "user"
        WHERE id = #{id}
    </delete>

    <!-- 更新使用者 -->
    <update id="updateUser">
        UPDATE "user" SET
        username = #{username},
        password = #{password},
        nickname = #{nickname},
        email = #{email},
        update_time = now()
        WHERE id = #{id}
    </update>

    <!-- 透過傳入的條件查找使用者(交集)，使用 resultType -->
     <select id="findByUserQueryIntersection" resultType="com.roger.user.pojo.User">
        SELECT *
        FROM "user"
        <!-- where 能動態處理條件的連接詞(OR or AND) 假如判讀為第一個就會不加入連接詞 -->
        <where>
            <if test="username != null and username != ''">
                AND username = #{username}
            </if>
            <if test="nickname != null and nickname != ''">
                AND nickname = #{nickname}
            </if>
            <if test="email != null and email != ''">
                AND email = #{email}
            </if>
        </where>
    </select>

    <!-- 透過傳入的條件查找使用者(交集)，使用 resultMap -->
    <resultMap id="userWithDepartmentMap" type="com.roger.user.pojo.User">
        <!-- 映射 User 類的屬性 -->
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="nickname" property="nickname"/>
        <result column="email" property="email"/>
        <result column="userPic" property="userPic"/>
        <result column="createTime" property="createTime"/>
        <result column="updateTime" property="updateTime"/>

        <!-- 關聯查詢部門的信息，多對一關聯 -->
        <association property="department" javaType="com.roger.department.pojo.Department">
            <!--
                在 <association> 元素中，<id> 元素的 column 屬性應該指向 user 表中的外鍵列 department_id
                ，而 property 屬性則指向 Department 對象中的 id 屬性
             -->
            <id column="department_id" property="id"/>
            <result column="name" property="name"/>
            <result column="description" property="description"/>
        </association>
    </resultMap>

    <!-- 透過傳入的條件查找使用者(聯集)，使用 resultType -->
    <select id="findByUserQueryUnion" resultType="com.roger.user.pojo.User">
        SELECT *
        FROM "user"
        <!-- where 能動態處理條件的連接詞(OR or AND) 假如判讀為第一個就會不加入連接詞 -->
        <where>
            <if test="username != null and username != ''">
                OR username = #{username}
            </if>
            <if test="nickname != null and nickname != ''">
                OR nickname = #{nickname}
            </if>
            <if test="email != null and email != ''">
                OR email = #{email}
            </if>
        </where>
    </select>

    <!--
        透過使用者姓名查找使用者 使用 resultType
        <select id="findByUserName" resultType="com.roger.user.pojo.User">
    -->

    <!--
        根據使用者名稱查找會員訊息，包含關聯的部門訊息
        透過使用者姓名查找使用者 使用 resultMap
    -->
    <select id="findByUserName" resultMap="userWithDepartmentMap">
        SELECT u.id, u.username, u.password, u.nickname, u.email,
               u.user_pic, u.create_Time, u.update_Time, u.department_id,
               d.id, d.name, d.description
        FROM "user" u
        LEFT JOIN department d ON u.department_id = d.id
        WHERE u.username = #{username}
    </select>
</mapper>
